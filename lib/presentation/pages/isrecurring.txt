          /*      CheckboxListTile(
                        value: _isRecurringEvent,
                        title: Text('Is recurring'),
                        onChanged: (isChecked) {
                          setState(() {
                            _isRecurringEvent = isChecked;
                          });
                        },
                      ),
                      if (_isRecurringEvent) ...[
                        ListTile(
                          leading: Text('Select a Recurrence Type'),
                          trailing: DropdownButton<RecurrenceFrequency>(
                            onChanged: (selectedFrequency) {
                              setState(() {
                                _recurrenceFrequency = selectedFrequency;
                                _getValidDaysOfMonth(_recurrenceFrequency);
                              });
                            },
                            value: _recurrenceFrequency,
                            items: RecurrenceFrequency.values
                                .map((frequency) => DropdownMenuItem(
                                      value: frequency,
                                      child:
                                          _recurrenceFrequencyToText(frequency),
                                    ))
                                .toList(),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.fromLTRB(15, 0, 15, 10),
                          child: Row(
                            children: <Widget>[
                              Text('Repeat Every '),
                              Flexible(
                                child: TextFormField(
                                  initialValue: _interval?.toString() ?? '1',
                                  decoration:
                                      const InputDecoration(hintText: '1'),
                                  keyboardType: TextInputType.number,
                                  inputFormatters: [
                                    WhitelistingTextInputFormatter.digitsOnly,
                                    LengthLimitingTextInputFormatter(2)
                                  ],
                                  validator: _validateInterval,
                                  textAlign: TextAlign.right,
                                  onSaved: (String value) {
                                    _interval = int.tryParse(value);
                                  },
                                ),
                              ),
                              _recurrenceFrequencyToIntervalText(
                                  _recurrenceFrequency),
                            ],
                          ),
                        ),
                        if (_recurrenceFrequency ==
                            RecurrenceFrequency.Weekly) ...[
                          Column(
                            children: [
                              ...DayOfWeek.values.map((day) {
                                return CheckboxListTile(
                                  title: Text(day.enumToString),
                                  value:
                                      _daysOfWeek?.any((dow) => dow == day) ??
                                          false,
                                  onChanged: (selected) {
                                    setState(() {
                                      if (selected) {
                                        _daysOfWeek.add(day);
                                      } else {
                                        _daysOfWeek.remove(day);
                                      }
                                      _updateDaysOfWeekGroup(selectedDay: day);
                                    });
                                  },
                                );
                              }),
                              Divider(color: Colors.black),
                              ...DayOfWeekGroup.values.map((group) {
                                return RadioListTile(
                                    title: Text(group.enumToString),
                                    value: group,
                                    groupValue: _dayOfWeekGroup,
                                    onChanged: (selected) {
                                      setState(() {
                                        _dayOfWeekGroup = selected;
                                        _updateDaysOfWeek();
                                      });
                                    },
                                    controlAffinity:
                                        ListTileControlAffinity.trailing);
                              }),
                            ],
                          )
                        ],
                        if (_recurrenceFrequency ==
                                RecurrenceFrequency.Monthly ||
                            _recurrenceFrequency ==
                                RecurrenceFrequency.Yearly) ...[
                          SwitchListTile(
                            value: _isByDayOfMonth,
                            onChanged: (value) =>
                                setState(() => _isByDayOfMonth = value),
                            title: Text('By day of the month'),
                          )
                        ],
                        if (_recurrenceFrequency ==
                                RecurrenceFrequency.Yearly &&
                            _isByDayOfMonth) ...[
                          ListTile(
                            leading: Text('Month of the year'),
                            trailing: DropdownButton<MonthOfYear>(
                              onChanged: (value) {
                                setState(() {
                                  _monthOfYear = value;
                                  _getValidDaysOfMonth(_recurrenceFrequency);
                                });
                              },
                              value: _monthOfYear,
                              items: MonthOfYear.values
                                  .map((month) => DropdownMenuItem(
                                        value: month,
                                        child: Text(month.enumToString),
                                      ))
                                  .toList(),
                            ),
                          ),
                        ],
                        if (_isByDayOfMonth &&
                            (_recurrenceFrequency ==
                                    RecurrenceFrequency.Monthly ||
                                _recurrenceFrequency ==
                                    RecurrenceFrequency.Yearly)) ...[
                          ListTile(
                            leading: Text('Day of the month'),
                            trailing: DropdownButton<int>(
                              onChanged: (value) {
                                setState(() {
                                  _dayOfMonth = value;
                                });
                              },
                              value: _dayOfMonth,
                              items: _validDaysOfMonth
                                  .map((day) => DropdownMenuItem(
                                        value: day,
                                        child: Text(day.toString()),
                                      ))
                                  .toList(),
                            ),
                          ),
                        ],
                        if (!_isByDayOfMonth &&
                            (_recurrenceFrequency ==
                                    RecurrenceFrequency.Monthly ||
                                _recurrenceFrequency ==
                                    RecurrenceFrequency.Yearly)) ...[
                          Padding(
                            padding: const EdgeInsets.fromLTRB(15, 10, 15, 10),
                            child: Align(
                                alignment: Alignment.centerLeft,
                                child: Text(_recurrenceFrequencyToText(
                                            _recurrenceFrequency)
                                        .data +
                                    ' on the ')),
                          ),
                          Padding(
                            padding: const EdgeInsets.fromLTRB(15, 0, 15, 10),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: <Widget>[
                                Flexible(
                                  child: DropdownButton<WeekNumber>(
                                    onChanged: (value) {
                                      setState(() {
                                        _weekOfMonth = value;
                                      });
                                    },
                                    value: _weekOfMonth ?? WeekNumber.First,
                                    items: WeekNumber.values
                                        .map((weekNum) => DropdownMenuItem(
                                              value: weekNum,
                                              child: Text(weekNum.enumToString),
                                            ))
                                        .toList(),
                                  ),
                                ),
                                Flexible(
                                  child: DropdownButton<DayOfWeek>(
                                    onChanged: (value) {
                                      setState(() {
                                        _selectedDayOfWeek = value;
                                      });
                                    },
                                    value: DayOfWeek
                                        .values[_selectedDayOfWeek.index],
                                    items: DayOfWeek.values
                                        .map((day) => DropdownMenuItem(
                                              value: day,
                                              child: Text(day.enumToString),
                                            ))
                                        .toList(),
                                  ),
                                ),
                                if (_recurrenceFrequency ==
                                    RecurrenceFrequency.Yearly) ...[
                                  Text('of'),
                                  Flexible(
                                    child: DropdownButton<MonthOfYear>(
                                      onChanged: (value) {
                                        setState(() {
                                          _monthOfYear = value;
                                        });
                                      },
                                      value: _monthOfYear,
                                      items: MonthOfYear.values
                                          .map((month) => DropdownMenuItem(
                                                value: month,
                                                child: Text(month.enumToString),
                                              ))
                                          .toList(),
                                    ),
                                  ),
                                ]
                              ],
                            ),
                          ),
                        ],
                        ListTile(
                          leading: Text('Event ends'),
                          trailing: DropdownButton<RecurrenceRuleEndType>(
                            onChanged: (value) {
                              setState(() {
                                _recurrenceRuleEndType = value;
                              });
                            },
                            value: _recurrenceRuleEndType,
                            items: RecurrenceRuleEndType.values
                                .map((frequency) => DropdownMenuItem(
                                      value: frequency,
                                      child: _recurrenceRuleEndTypeToText(
                                          frequency),
                                    ))
                                .toList(),
                          ),
                        ),
                        if (_recurrenceRuleEndType ==
                            RecurrenceRuleEndType.MaxOccurrences)
                          Padding(
                            padding: const EdgeInsets.fromLTRB(15, 0, 15, 10),
                            child: Row(
                              children: <Widget>[
                                Text('For the next '),
                                Flexible(
                                  child: TextFormField(
                                    initialValue:
                                        _totalOccurrences?.toString() ?? '1',
                                    decoration:
                                        const InputDecoration(hintText: '1'),
                                    keyboardType: TextInputType.number,
                                    inputFormatters: [
                                      WhitelistingTextInputFormatter.digitsOnly,
                                      LengthLimitingTextInputFormatter(3),
                                    ],
                                    validator: _validateTotalOccurrences,
                                    textAlign: TextAlign.right,
                                    onSaved: (String value) {
                                      _totalOccurrences = int.tryParse(value);
                                    },
                                  ),
                                ),
                                Text(' occurrences'),
                              ],
                            ),
                          ),
                        if (_recurrenceRuleEndType ==
                            RecurrenceRuleEndType.SpecifiedEndDate)
                          Padding(
                            padding: const EdgeInsets.all(10.0),
                            child: DateTimePicker(
                              labelText: 'Date',
                              enableTime: false,
                              selectedDate: _recurrenceEndDate,
                              selectDate: (DateTime date) {
                                setState(() {
                                  _recurrenceEndDate = date;
                                });
                              },
                            ),
                          ),
                      ],
                     */